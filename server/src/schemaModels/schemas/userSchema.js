import mongoose from "mongoose";
import bcrypt from "bcrypt";
import { ROLE_ENUM } from "../../config/config.js";

const userSchema = new mongoose.Schema(
    {
        fullName: {
            type: String,
            required: [true, "Full Name is required"],
        },
        email: {
            type: String,
            required: [true, "Email is required"],
            unique: true,
        },
        phoneNumber: {
            type: String,
            required: [true, "Phone Number is required"],
        },
        address: {
            type: String,
            required: [true, "Address is required"],
        },
        userImg: {
            type: String,
            required: [true, "User image is required"],
        },
        role: {
            type: String,
            enum: {
                values: ROLE_ENUM,
                message: `{VALUE} is not supported for the role`,
            },
        },
        password: {
            type: String,
            required: [true, "Password is required"],
        },
        isAutoGeneratedPasswordChanged: {
            type: Boolean,
            default: false,
        },
        verificationCode: {
            code: {
                type: String,
                default: "",
            },
            expiration: {
                type: String,
                default: "",
            },
        },
    },
    { timestamps: true }
);

userSchema.pre("save", async function (next) {
    if (!this.isModified("password")) {
        return next();
    }
    const salt = await bcrypt.genSalt(12);
    const hashedPassword = await bcrypt.hash(this.password, salt);
    this.password = hashedPassword;
    next();
});

export default userSchema;
