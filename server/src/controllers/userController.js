import mongoose from "mongoose";
import { FROM_EMAIL } from "../config/config.js";
import { HttpStatus } from "../constant/constants.js";
import sendSuccessResponse from "../helpers/apiResponseHandler.js";
import { User } from "../schemaModels/model.js";
import {
    deleteFile,
    generateStrongPassword,
    sendMail,
} from "../utils/index.js";
import { asyncErrorHandler, throwError } from "../helpers/index.js";

export const addUser = asyncErrorHandler(async (req, res) => {
    //Getting user img and user info
    const userImg = req.file.filename;
    let userInfo = req.body.user;

    if (!userImg) {
        throwError({
            message: "Doctor Image is required",
            statusCode: HttpStatus.BAD_REQUEST,
        });
    }

    if (!userInfo) {
        throwError({
            message: "User data is required",
            statusCode: HttpStatus.BAD_REQUEST,
        });
    }

    userInfo = JSON.parse(userInfo);

    //   Checking if any info is missing
    const propertiesToCheck = [
        "fullName",
        "email",
        "phoneNumber",
        "address",
        "role",
    ];

    if (propertiesToCheck.some((prop) => !userInfo[prop])) {
        throwError({
            message: "All fields are required",
            statusCode: HttpStatus.BAD_REQUEST,
        });
    }

    //   Checking is user already exists
    const isUserExists = await User.findOne({ email: userInfo.email });

    if (isUserExists) {
        // Deleting the user img
        deleteFile(userImg);
        throwError({
            message: "User already exists",
            statusCode: HttpStatus.CONFLICT,
        });
    }

    //   Generating password
    const password = generateStrongPassword();

    //   Storing user info
    let user = new User({ ...userInfo, userImg, password });

    // Generating token to for reset password
    const userInfoForToken = {
        fullName,
        phoneNumber,
        role,
        userImg,
        email,
    };

    const authToken = generateAuthToken(userInfoForToken);

    // Sending mail to the user
    const mailMessage = {
        from: FROM_EMAIL,
        // Email or array of email
        to: userInfo.email,
        subject: "Doctor Account Created",
        // Mail Message should be here in html format
        html: `
    <html>
    <head>
      <title> Account Created</title>
    </head>
    <body>
      <h1></h1>
      <p>Your account has been successfully created</p>
      <p>Your auto-generated password is: <strong>${password}</strong></p>
      <p> <a href="${CLIENT_URL}/${authToken}"> Click Here </a> to reset the password </p>
      <p>Please keep this password secure and do not share it with anyone.</p>
      <p>You can now log in to your account and use the services</p>
      <p>Best regards,<br>Your App Team</p>
    </body>
    </html>
  `,
    };

    const result = await Promise.allSettled([
        sendMail(mailMessage),
        user.save(),
    ]);

    user = result[1].value;
    user.password = null;

    sendSuccessResponse({
        res,
        data: user,
        message: "User is added successfully",
    });

    sendSuccessResponse({
        res,
        data: user,
        message: "User is added successfully",
    });
});

export const getAllUsers = asyncErrorHandler(async (req, res) => {
    const users = await User.find(
        {},
        { password: false, isAutoGeneratedPasswordChanged: false, OTP: false }
    ).sort({
        createdAt: -1,
    });

    sendSuccessResponse({
        res,
        data: users,
        message: "All users are fetched successfully",
    });
});

export const deleteUser = asyncErrorHandler(async (req, res) => {
    const userID = req.params.userID;

    // checking if user id is valid mongoose _id
    if (!mongoose.Types.ObjectId.isValid(userID)) {
        throwError({
            message: "User does not exists",
            statusCode: HttpStatus.NOT_FOUND,
        });
    }

    const user = await User.findByIdAndDelete(userID);

    if (!user) {
        throwError({
            message: "User not found",
            statusCode: HttpStatus.NOT_FOUND,
        });
    }

    // Deleting the user img
    deleteFile(user.userImg);

    sendSuccessResponse({
        res,
        message: "User is deleted successfully",
    });
});

export const updateUser = asyncErrorHandler(async (req, res) => {
    const userID = req.params.userID;

    const newUserImg = req?.file?.filename;
    let userInfo = req.body.userInfo;

    // checking if user id is valid mongoose _id
    if (!mongoose.Types.ObjectId.isValid(userID)) {
        throwError({
            message: "User does not exists",
            statusCode: HttpStatus.NOT_FOUND,
        });
    }

    if (!userInfo) {
        throwError({
            message: "User info is required",
            statusCode: HttpStatus.BAD_REQUEST,
        });
    }

    // Parsing string to object
    userInfo = JSON.parse(userInfo);

    let user = await User.findById(userID);

    if (!user) {
        throwError({
            message: "User not found",
            statusCode: HttpStatus.NOT_FOUND,
        });
    }

    // Making sure that email cannot be changed
    if (userInfo.email && user.email !== userInfo.email) {
        throwError({
            message: "Email cannot be changed",
            statusCode: HttpStatus.BAD_REQUEST,
        });
    }

    // Updating profile img if new img comes
    if (newUserImg) {
        // Deleting the previous user img
        deleteFile(user.userImg);

        // Updating the user img
        user.userImg = newUserImg;
    }

    // Merging the initial user details with new updated details
    Object.assign(user, userInfo);

    // Saving the updated user details
    user = await user.save();

    sendSuccessResponse({
        res,
        data: user,
        message: "User details are updated successfully",
    });
});

export const getUserByID = asyncErrorHandler(async (req, res) => {
    const userID = req.params.userID;

    // checking if user id is valid mongoose _id
    if (!mongoose.Types.ObjectId.isValid(userID)) {
        throwError({
            message: "User does not exists",
            statusCode: HttpStatus.NOT_FOUND,
        });
    }

    let user = await User.findById(userID);

    if (!user) {
        throwError({
            message: "User not found",
            statusCode: HttpStatus.NOT_FOUND,
        });
    }

    sendSuccessResponse({
        res,
        data: user,
        message: "User detail is fetched successfully",
    });
});
